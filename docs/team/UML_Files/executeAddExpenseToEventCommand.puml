@startuml
participant Logic 
participant "x:AddExpenseToEventCommand" as Command
participant ":ExpenseManager" as ExpenseManager
participant ":EventManager" as EventManager
participant "newOwningEvent:Event" as noe
participant "originalOwningEvent:Event" as ooe
participant "expense:Expense" as Expense


Logic -> Command: execute(dashboard : Dashboard)
activate Command

Command -> ExpenseManager: isExpenseIndexValid(expenseIdx : int)
activate ExpenseManager
ExpenseManager --> Command: isValidExpenseIndex : bool
deactivate ExpenseManager

Command -> EventManager: isEventIndexValid(eventIdx : int)
activate EventManager
EventManager --> Command: isValidEventIndex : bool
deactivate EventManager

opt !isValidExpenseIndex || !isValidEventIndex
    note right of Command
        Invalid expense or event index
    end note
    Command --> Logic: 
end

Command -> ExpenseManager: getExpense(expenseIdx : int)
activate ExpenseManager
ExpenseManager --> Command: expense
deactivate ExpenseManager

Command -> EventManager: getEvent(eventIdx : int)
activate EventManager
EventManager --> Command: newOwningEvent
deactivate EventManager

Command -> noe : containsExpense(expense)
activate noe
noe --> Command: isExpenseOwnedByEvent : bool
deactivate noe

opt isExpenseOwnedByEvent
    note right of Command
        Expense is already owned by the event
    end note
    Command --> Logic:
end

Command -> Expense: getOwningEvent()
activate Expense
Expense --> Command: originalOwningEvent
deactivate Expense

opt originalOwningEvent != null
    Command -> ooe: removeExpense(expense)
    activate ooe
    ooe --> Command:
    deactivate ooe
    Command -> Expense: removeOwningEvent()
    activate Expense
    Expense --> Command:
    deactivate Expense
end

Command -> noe: addExpense(expense)
activate noe
noe --> Command:
deactivate noe

Command -> Expense: setOwningEvent(newOwningEvent)
activate Expense
Expense --> Command:
deactivate Expense

Command --> Logic:
deactivate Command

@enduml